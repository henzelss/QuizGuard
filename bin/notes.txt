# form.firstname.data = request.form.get('firstname')
# form.lastname.data = request.form.get('lastname')
# form.section.data = request.form.get('section')
# form.email.data = request.form.get('email')
# form.password.data = request.form.get('password')
# form.retypepassword.data = request.form.get('retypepassword')


-----------------student - quiz route----------------------
{% block content %}
    <div class="container my-5">
       
    </div>
{% endblock %}
-----------------student - quiz route----------------------


 {{ form.password.label(class='text-light') }}
        {{ form.password(class='text-dark', required=True) }}
    
        {{ form.retypepassword.label(class='text-light') }}
        {{ form.retypepassword(class='text-dark', required=True) }}



-----------------------------------------------------Views.py--------------------------------------------------------------------

import os
from website.detection import gen
from os import path
import torch
import io
from PIL import Image
import cv2
import numpy as np
from io import BytesIO
import torch
import pandas
import time
import mediapipe as mp


violations = {
    'detected' : 'Nothing is detected',
    'multiple_people' : 'Nothing is detected',
    'phone_detected' : 'No Phone is detected',
    'focus' : 'Nothing is detected',
    'switch_tabs' : 'Nothing is detected',
    'detection_time': 'Not set yet'
}

mp_face_mesh = mp.solutions.face_mesh
face_mesh = mp_face_mesh.FaceMesh(min_detection_confidence=0.5, min_tracking_confidence=0.5)

mp_drawing = mp.solutions.drawing_utils

drawing_spec = mp_drawing.DrawingSpec(thickness=1, circle_radius=1)


def load_model():
    model = torch.hub.load('ultralytics/yolov5', 'custom', 'yolov5s.pt')
    model.eval()
    model.cpu()
    model.conf = 0.6  # confidence threshold (0-1)
    model.iou = 0.5  # NMS IoU threshold (0-1) 
    model.nms = 0.1
    #model.classes = [0, 2, 3, 5, 6, 7]
    return model

@views.route("/video")
@login_required
def video():
    model = load_model()
    return Response(gen(model),mimetype='multipart/x-mixed-replace; boundary=frame')

def gen(model):
    cap=cv2.VideoCapture(0)
    # Read until video is completed
    frame_count = 0 
    total_fps = 0 
    while(cap.isOpened()):
        
        # Capture frame-by-fram ## read the camera frame
        success, frame = cap.read()
        #frame = cv2.flip(frame, 1)
        if success == True:

            ret,buffer=cv2.imencode('.jpg',frame)
            frame=buffer.tobytes()
            
            img = Image.open(io.BytesIO(frame))   
            #pose_estimation(frame)

            current_detection = ""
            
            image = np.array(Image.open(io.BytesIO(frame)))
            output = face_mesh.process(image)
            
            # To improve performance
            image.flags.writeable = True
            
            # Convert the color space from RGB to BGR
            image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)

            img_h, img_w, img_c = image.shape
            face_3d = []
            face_2d = []

            if output.multi_face_landmarks:
                for face_landmarks in output.multi_face_landmarks:
                    for idx, lm in enumerate(face_landmarks.landmark):
                        if idx == 33 or idx == 263 or idx == 1 or idx == 61 or idx == 291 or idx == 199:
                            if idx == 1:
                                nose_2d = (lm.x * img_w, lm.y * img_h)
                                nose_3d = (lm.x * img_w, lm.y * img_h, lm.z * 3000)

                            x, y = int(lm.x * img_w), int(lm.y * img_h)

                            # Get the 2D Coordinates
                            face_2d.append([x, y])

                            # Get the 3D Coordinates
                            face_3d.append([x, y, lm.z])       
                    
                    # Convert it to the NumPy array
                    face_2d = np.array(face_2d, dtype=np.float64)

                    # Convert it to the NumPy array
                    face_3d = np.array(face_3d, dtype=np.float64)

                    # The camera matrix
                    focal_length = 1 * img_w

                    cam_matrix = np.array([ [focal_length, 0, img_h / 2],
                                            [0, focal_length, img_w / 2],
                                            [0, 0, 1]])

                    # The distortion parameters
                    dist_matrix = np.zeros((4, 1), dtype=np.float64)

                    # Solve PnP
                    success, rot_vec, trans_vec = cv2.solvePnP(face_3d, face_2d, cam_matrix, dist_matrix)

                    # Get rotational matrix
                    rmat, jac = cv2.Rodrigues(rot_vec)

                    # Get angles
                    angles, mtxR, mtxQ, Qx, Qy, Qz = cv2.RQDecomp3x3(rmat)

                    # Get the y rotation degree
                    x = angles[0] * 360
                    y = angles[1] * 360
                    z = angles[2] * 360
                

                    # See where the user's head tilting
                    if y < -10:
                        # i want to know how long this guy been looking to his left or right or up or down
                        #text = "Looking Left"
                        current_detection = 'Left'
                        #print(current_detection)
                    elif y > 10:
                        current_detection = 'Right'
                        #print(current_detection)
                    elif x < -10:
                        current_detection = "Looking Down"
                        #print(current_detection)
                    elif x > 10:
                        current_detection = "Looking Up"
                        #print(current_detection)
                    else:
                        current_detection = "Front"
                        #print(current_detection)

                    # Display the nose direction
                    nose_3d_projection, jacobian = cv2.projectPoints(nose_3d, rot_vec, trans_vec, cam_matrix, dist_matrix)
            
            start_time = time.time()
            results = model(img, size=412)
            rl = results.xyxy[0].tolist()
            
            forward_end_time = time.time()
            forward_pass_time = forward_end_time - start_time
            # Get the current fps.
            fps = 1 / (forward_pass_time)
            # Add `fps` to `total_fps`.
            total_fps += fps
            # Increment frame count.
            frame_count += 1

            for  detection in rl:
                if detection[5] == 0:
                    # current_detection = 'left'
                    violations["detected"] = "The user keep looking to the back"
                    yolo_detection = violations["detected"]
                    print(violations["detected"])
                    #data_recorded(detection=violations["detected"])
                    #check_detection
                    # record_data()
                    # check_detection(current_detection, counter)
                    # counter = 1
                elif detection[5] == 1:
                    violations["detected"] = "The user is focus"
                    yolo_detection = violations["detected"]
                    #data_recorded(detection=violations["detected"])
                    print(violations["detected"])
                elif detection[5] == 2:
                    violations["detected"] = "The user keep looking to the Frontleft"
                    yolo_detection = violations["detected"]
                    #data_recorded(detection=violations["detected"])
                    print(violations["detected"])
                elif detection[5] == 3:
                    violations["detected"] = "The user keep looking to the FrontRight"
                    yolo_detection = violations["detected"]
                    #data_recorded(detection=violations["detected"])
                    print(violations["detected"])
                elif detection[5] == 4:
                    violations["detected"] = "The user keep looking to the left"
                    yolo_detection = violations["detected"]
                    #data_recorded(detection=violations["detected"])
                    print(violations["detected"])
                elif detection[5] == 5:
                    violations["phone_detected"] = "The system detected some phone"
                    yolo_detection = violations["phone_detected"]
                    #data_recorded(detection=violations["detected"])
                    print(violations["phone_detected"])
                elif detection[5] == 6:
                    violations["detected"] = "The user keep looking to the right"
                    yolo_detection = violations["detected"]
                    #data_recorded(detection=violations["detected"])
                    print(violations["detected"])
                elif detection[5]:
                    violations["detected"] = "nothing is detected"
               

            #convert remove single-dimensional entries from the shape of an array
            img = np.squeeze(results.render()) #RGB
            img = annotate_fps(img, fps)
            
            # read image as BGR
            img_BGR = cv2.cvtColor(img, cv2.COLOR_RGB2BGR) #BGR

            final_end_time = time.time()
            forward_and_annot_time = final_end_time - start_time
            print_string = f"Frame: {frame_count}, Forward pass FPS: {fps:.3f}, "
            print_string += f"Forward pass time: {forward_pass_time:.3f} seconds, "
            print_string += f"Forward pass + annotation time: {forward_and_annot_time:.3f} seconds"
            #print(print_string)  
        else:
            break

        # Encode BGR image to bytes so that cv2 will convert to RGB
        frame = cv2.imencode('.jpg', img_BGR)[1].tobytes()
        #print(frame)
        
        yield(b'--frame\r\n'b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')

def draw_text(
        img,
        text,
        font=cv2.FONT_HERSHEY_SIMPLEX,
        pos=(0, 0),
        font_scale=1,
        font_thickness=2,
        text_color=(0, 255, 0),
        text_color_bg=(0, 0, 0),
    ):
        offset = (5, 5)
        x, y = pos
        text_size, _ = cv2.getTextSize(text, font, font_scale, font_thickness)
        text_w, text_h = text_size
        rec_start = tuple(x - y for x, y in zip(pos, offset))
        rec_end = tuple(x + y for x, y in zip((x + text_w, y + text_h), offset))
        cv2.rectangle(img, rec_start, rec_end, text_color_bg, -1)
        cv2.putText(
            img,
            text,
            (x, int(y + text_h + font_scale - 1)),
            font,
            font_scale,
            text_color,
            font_thickness,
            cv2.LINE_AA,
        )
        return img   

def annotate_fps(orig_image, fps_text):
    draw_text(
        orig_image,
        f"FPS: {fps_text:0.1f}",
        pos=(20, 20),
        font_scale=1.0,
        text_color=(204, 85, 17),
        text_color_bg=(255, 255, 255),
        font_thickness=2,
    )
    return orig_image


# passing variable from javascript and python using Ajax
# https://stackoverflow.com/questions/2894946/passing-javascript-variable-to-python
@views.route('/pass_val',methods=['POST'])
@login_required
def pass_val():
    violations['switch_tabs']= request.args.get('value')
    switchtabs = violations['switch_tabs']
    #data_recorded(switch_tabs=violations['switch_tabs'])
    return jsonify({'reply':'success'})

def record_the_detection():
    new_violations = Violations(
            detected=violations['detected'], 
            phone_detected= violations['phone_detected'],
            user_id=current_user.id
        )

@views.route('/quiz1')
def quiz1():
    return render_template('quiz1.html')


@views.route('/records')
@login_required
def records():
    return render_template('records.html', violations=violations, username=current_user.email)
-----------------------------------------------------Views.py--------------------------------------------------------------------






---------------------------------------------------student.html------------------------------------------------------------------
 <div class="container bg-night mt-5 rounded">
        <h1 class="text-light">Quiz List</h1>
        <div class="list-group bg-night mb-2 rounded" style="border:none;"> 
            <a href="#" class="list-group-item list-group-item-action bg-night card-design text-hover">
              <div class="d-flex w-100 justify-content-between"> 
                <h5 class="mb-1">Quiz Title</h5>
                <small>3 days ago &nbsp;
                </small>
              </div>
              <p class="mb-1">Some Quiz Decription Lorem ipsum dolor sit amet consectetur adipisicing elit.</p>
              <small>Deadline </small>
            </a>    
            <div class="ms-auto p-2">
                <button class="btn-warning rounded">Edit</button>
                <button class="btn-danger rounded">Delete</button>
            </div>
        </div>
    </div>
---------------------------------------------------student.html------------------------------------------------------------------

---------------------------------------------------Utils.py----------------------------------------------------------------------
# # from .utils import create_defualt_admin,  create_defualt_professor
# # create_defualt_admin()
# # create_defualt_professor()


# def create_defualt_admin():
#     email = 'admin@gmail.com'
#     password = 'admin123'
#     existing_admin = User.query.filter_by(email=email, usertype='admin').first()
#     if existing_admin is None:
#         hashed_password = generate_password_hash(password, method='sha256')
#         new_admin = User(firstname='admin', lastname='admin', section='admin', email=email, password=hashed_password, usertype='admin')
#         db.session.add(new_admin)
#         db.session.commit()
#         print('Default admin account created.')
#     else:
#         print('Default admin account already exists.')

# def create_defualt_professor():
#     email = 'professor@gmail.com'
#     password = 'prof123'
#     existing_admin = User.query.filter_by(email=email, usertype='admin').first()
#     if existing_admin is None:
#         hashed_password = generate_password_hash(password, method='sha256')
#         new_admin = User(firstname='Henzel', lastname='Lagahit', section='professor', email=email, password=hashed_password, usertype='admin')
#         db.session.add(new_admin)
#         db.session.commit()
#         print('Default admin account created.')
#     else:
#         print('Default admin account already exists.')

---------------------------------------------------Utils.py----------------------------------------------------------------------


------------------------------------------------alert message--------------------------------------------------------------------
<div class="container mt-5 rounded">
  {% with messages = get_flashed_messages(with_categories=true)%}
    {% if messages %} 
        {% for category, message in messages %}
            {% if category == 'danger' %}
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-exclamation-triangle-fill" viewBox="0 0 16 16">
                        <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
                    </svg>
                    {{ message }}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            {% elif category == 'success' %}
              <div class="alert alert-success alert-dismissible fade show" role="alert">
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check" viewBox="0 0 16 16">
                      <path d="M10.97 4.97a.75.75 0 0 1 1.07 1.05l-3.99 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.267.267 0 0 1 .02-.022z"/>
                  </svg>
                  {{ message }}
                  <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
              </div>
            {% else %}  
              <div class="alert alert-warning alert-dismissible fade show" role="alert">
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check" viewBox="0 0 16 16">
                      <path d="M10.97 4.97a.75.75 0 0 1 1.07 1.05l-3.99 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.267.267 0 0 1 .02-.022z"/>
                  </svg>
                  {{ message }}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
              </div>
            {% endif %}
        {% endfor %}
    {% endif%}
  {% endwith%}
</div>



    <div class="container mt-5 p-4 rounded">
        {% with messages = get_flashed_messages(with_categories=true)%}
            {% if messages %} 
                {% for category, message in messages %}
                    {% if category == 'error' %}
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-exclamation-triangle-fill" viewBox="0 0 16 16">
                                <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
                            </svg>
                            {{ message }}
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    {% else %}  
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check" viewBox="0 0 16 16">
                                <path d="M10.97 4.97a.75.75 0 0 1 1.07 1.05l-3.99 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.267.267 0 0 1 .02-.022z"/>
                            </svg>
                            {{ message }}
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    {% endif %}
                {% endfor %}
            {% endif%}
        {% endwith%}
    </div>
------------------------------------------------alert message--------------------------------------------------------------------



----------------------------------------------------------------------------------add questions--------------------------------------------------------------------------------
<div class="container mt-5 rounded bg-night p-3">
  <!-- Category -->
  {% if quiztype == '1' %}
    <h1>Matching Type</h1>
  {% elif quiztype == '2' %}
    <h1>Fill in the blanks Type</h1>
  {% elif quiztype == '3' %}
    <h1>True or False</h1>
  {% endif %}

  <!-- Add Questions -->
  <div class="accordion-item bg-night">
    <h2 class="accordion-header" id="headingTwo">
      <button class="accordion-button collapsed bg-night" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
        Add New Questions
      </button>
    </h2>
    <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#accordionExample">
      <div class="accordion-body bg-night">
        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
      </div>
    </div>
  </div>
</div>
  ----------------------------------------------------------------------------------add questions--------------------------------------------------------------------------------



--------------------------------------------------------------------------how to set time limit----------------------------------------------------------------------------------------

how do i set the time limit?
To set a time limit for a quiz, you need to define a maximum time that a user can spend on the quiz. Here's an example of how you could set a time limit using Python and Flask:

Create a new column called "time_limit" in your QuizList table to store the maximum time limit for the quiz in seconds.

When a user starts a quiz, store the current time in a session variable.

python
Copy code
# Example code to store current time in a session variable
from flask import session
import time

session['start_time'] = time.time()
When a user submits the quiz or reaches the time limit, calculate the elapsed time by subtracting the start time from the current time and compare it to the time limit. If the elapsed time is greater than the time limit, stop the quiz and display a message to the user.

python
Copy code
# Example code to calculate elapsed time and check against time limit
from flask import session
import time

# Get the start time from the session
start_time = session.get('start_time', 0)

# Calculate elapsed time
elapsed_time = time.time() - start_time

# Get the time limit for the quiz from the database
quiz = QuizList.query.get(quiz_id)
time_limit = quiz.time_limit

# Check if the elapsed time is greater than the time limit
if elapsed_time > time_limit:
    # Stop the quiz and display a message to the user
    flash('Time limit exceeded', category='error')
    return redirect(url_for('views.quiz'))
Note that this is just an example and you may need to modify the code to fit your specific needs.
--------------------------------------------------------------------------how to set time limit----------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------Accounts---------------------------------------------------------------------------------------
<div class="container">
        <div class="row row-cols-1 row-cols-md-2 g-4">
            <div class="col">
                <div class="card  card-design">
                    <img src="{{ url_for('views.images', filename='quiz.jpg') }}" class="card-img-top" alt="quiz.jpg">
                    <div class="card-body">
                        <h5 class="card-title">Manage Accounts</h5>
                        <p class="card-text">This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>
                        <a href="{{ url_for('auth.accounts') }}" class="btn btn-warning btn-links-hover">Manage</a>
                    </div>
                </div>
            </div>
            <div class="col">
                <div class="card card-design">
                    <img src="{{ url_for('views.images', filename='quiz.jpg') }}" class="card-img-top" alt="quiz.jpg">
                    <div class="card-body">
                        <h5 class="card-title">Create Quiz</h5>
                        <p class="card-text">This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>
                        <a href="{{ url_for('views.createquiz')}}" class="btn btn-warning btn-links-hover">Create Quiz</a>
                    </div>
                </div>
            </div>
            <div class="col">
                <div class="card card-design">
                    <img src="{{ url_for('views.images', filename='quiz.jpg') }}" class="card-img-top" alt="quiz.jpg">
                    <div class="card-body">
                        <h5 class="card-title">Live Logs</h5>
                        <p class="card-text">This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>
                        <a href="{{ url_for('auth.logs')}}" class="btn btn-warning btn-links-hover">View Logs</a>
                    </div>
                </div>
            </div>
            <div class="col">
                <div class="card card-design">
                    <img src="{{ url_for('views.images', filename='quiz.jpg') }}" class="card-img-top" alt="quiz.jpg">
                    <div class="card-body">
                        <h5 class="card-title">Quiz Bank</h5>
                        <p class="card-text">This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>
                        <a href="{{ url_for('views.quizbank')}}" class="btn btn-warning btn-links-hover">Quiz Bank</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
------------------------------------------------------------------------------------------Accounts---------------------------------------------------------------------------------------